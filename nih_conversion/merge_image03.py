import csv
import os
import numpy as np
import pandas as pd

from datetime import datetime
from getpass import getuser, getpass
from gooey import Gooey, GooeyParser

"""
Create final image03 submission file
    Add in demographic info needed for submission that we couldn't access on Unix (because it lives on Box)
"""
def merge_image03(image03_nodemo_csv, dob_csv, other_csv, from_date=None):
    # read in file generated by gen_image03 
    image_df = pd.read_csv(image03_nodemo_csv)

    # replace event names
    event_name_renames = ['Screening', '12 Month Follow-up', 'Initial Clinical Visit', '2 Year Clinical Visit']
    image_df['visit'] = image_df['visit'].replace(
        ['screening', '12month', 'baseline', '2YR'],
        event_name_renames
    )

    # load RedCap csv with dob
    dob_df = pd.read_csv(dob_csv)
    dob_df=dob_df.dropna(subset=['demo_dob'])

    # merge DOB df into image df and calculate age in months for each scan
    image_df = image_df.merge(dob_df, on='demo_study_id')
    image_df['interview_date'] = pd.to_datetime(image_df['interview_date'], format='%Y%m%d')
    image_df['interview_age'] = (image_df['interview_date'] - pd.to_datetime(image_df['demo_dob'])).apply(lambda x: round(.0328767*x.days) if pd.notnull(x) else np.nan)
    image_df['interview_date'] = image_df['interview_date'].map(lambda x: x.strftime('%m/%d/%Y') if pd.notnull(x) else x) # convert to NIH date format
    image_df = image_df.drop(columns=['demo_dob', 'redcap_event_name'], errors='ignore') # remove columns that aren't part of submission (i.e. for calculation only)
    image_df['image_file'] = image_df['image_file'].apply(lambda x: os.path.basename(x)) # remove path name from image file name
    # image_df['image_file'] = image_df['image_file'].apply(lambda x: os.path.join(study_dir, os.path.basename(x))) # change filepath to match Windows path (since originally created on unix)

    # filter out scans before from_date 
    #   (we only submit new imaging data each time)
    if from_date:
        image_df = image_df[pd.to_datetime(image_df['interview_date']) >= from_date]

    # extract GUID (aka subjectkey) and sex from one of the other submission forms and merge into final df
    other_df = pd.read_csv(other_csv, skiprows=1) # skiprows to skip first line (NIH header)
    other_df = other_df[['demo_study_id', 'sex', 'subjectkey']] 
    image_df = image_df.merge(other_df, on='demo_study_id')

    # write NIH header into file
    outfile = os.path.join(os.path.dirname(image03_nodemo_csv), 'image03.csv')
    with open(outfile, 'w', newline='') as f:
        writer = csv.writer(f)
        writer.writerow(['image', '3'])

    image_df.to_csv(outfile, mode='a', index=False, float_format='%g') # save form data to file



if __name__ == '__main__':
    @Gooey
    def parse_args():
        parser = GooeyParser()
        parser.add_argument('--image03_nodemo_csv', widget='FileChooser', help='image03_nodemo.csv (output of gen_image03.py)')
        parser.add_argument('--dob_csv', widget='FileChooser', help='RedCap csv file containing demo_dob field')
        parser.add_argument('--other_csv', widget='FileChooser', help='A different NDAR-ready csv containing subjectkey (GUID) and sex')
        parser.add_argument('--from_date', widget='DateChooser', type=lambda d: datetime.strptime(d, '%Y-%m-%d'), help='only process subjects from and including date (for NT R01, enter 8/10/2017)')
        return parser.parse_args()

    args = parse_args()
    merge_image03(args.image03_nodemo_csv, args.dob_csv, args.other_csv, args.from_date)
